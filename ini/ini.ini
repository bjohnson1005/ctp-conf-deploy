# Cooperative jgw 09/02/2013
#
[main]
sessionManager = org.apache.shiro.session.mgt.DefaultSessionManager

# Ensure the securityManager uses the SessionManager just specified.
securityManager.sessionManager = $sessionManager

# Session timeout  on a gobal scale - set to 10 minutes (60000 x 10) here.
# securityManager.sessionManager.globalSessionTimeout = 600000

# Set the sessionManager DAO ...
sessionDAO = org.apache.shiro.session.mgt.eis.MemorySessionDAO
# sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO

# Set the DAO object here.
securityManager.sessionManager.sessionDAO = $sessionDAO

# Set the CacheManager ...
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
# cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
# cacheManager = io.idvc.coop.basis.secman.shiro.HazelcastCacheManager
securityManager.cacheManager = $cacheManager

# Set the PasswordMatcher
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher.passwordService = $passwordService

######################################################################
######################################################################
# Session validation
sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
# Default is 3,600,000 millis 3600000 = 1 hour - here is set to 5 minutes 60000 x 5
# Set to 2 minutes 60000 * 2 for testing ...
sessionValidationScheduler.interval = 120000
sessionValidationScheduler.sessionManager = $sessionManager

# Set the SecurityManager to use the sessionValidationScheduler
securityManager.sessionManager.sessionValidationScheduler = $sessionValidationScheduler
securityManager.sessionManager.sessionValidationSchedulerEnabled = true
securityManager.sessionManager.deleteInvalidSessions = true

# Session Event Listener
CooperativeSessionListener = io.idvc.coop.basis.secman.shiro.BasisSessionListener

securityManager.sessionManager.sessionListeners = $CooperativeSessionListener

######################################################################
######################################################################
# Uncomment the five lines below to use authentication and authorization
# with Cooperative specific data stores; e.g., MongoDB and S3.
# Note that the realm SHALL be capable of querying the data stores and
# returning the values required for auth/auth.

CooperativeRealm = io.idvc.coop.basis.secman.shiro.BasisRealm
CooperativeRealm.authenticationCachingEnabled = true 
CooperativeRealm.authorizationCachingEnabled = true 
securityManager.realms = $CooperativeRealm 
CooperativeRealm.credentialsMatcher = $passwordMatcher

######################################################################
######################################################################

# Auth strategy
authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
securityManager.authenticator.authenticationStrategy = $authcStrategy

# TODO set passwords to hashed values and set the password strategy accordingly.

# -----------------------------------------------------------------------------
# Users and their assigned roles
#
# Each line conforms to the format defined in the
# org.apache.shiro.realm.text.TextConfigurationRealm#setUserDefinitions JavaDoc
# -----------------------------------------------------------------------------
[users]
# user 'root' with password 'secret' and the 'admin' role
root = $shiro1$SHA-256$500000$2mJKxz+fnc1uJfDLUz5MBw==$asWVux1uy+Ye2c6u1/Ag8m4YKB5kxQAYcZrx7MK28Bs=, admin

# user 'guest' with the password 'guest' and the 'guest' role
guest = $shiro1$SHA-256$500000$oSHcdSFDHcuFrN0+yyIfHw==$p6da4F5uLJdggdgHUFri+iqebm6W3TJYKPIvY1GKOlE=, guest

# user 'reader' with the password 'reader' and the 'read' role
reader = $shiro1$SHA-256$500000$Q2QanT4xHsPIkp/ILin/fg==$L/34TOtOLNLYWTZO2lM3SroQmloDcyMnHADOlxCUuXE=, read

# user 'writer' with the password 'writer' and the 'read', 'write' roles
writer = $shiro1$SHA-256$500000$6MTzXV0v31rgtKoa8YEi0g==$n/F6iHcS9pzpo9EXeMPqcJZ/SxtzoY727WJF+pasynU=, read, write

# user 'deleter' with the password 'deleter' and the 'read', 'write', 'delete' roles
deleter = $shiro1$SHA-256$500000$NcN+5xRx3MES6/WC8cIUHg==$kNDgtPEc1fxjUADOaXeDPHH/spjf7T60Ykif2tN1nE8=, read, write, delete

# user 'superuser' with the password 'superuser' and the 'read', 'write', 'delete', 'admin' roles
superuser = $shiro1$SHA-256$500000$K8ASJNUauf2N64T+6+OhdQ==$BSQj3loliKWVbyBWmtZhyJL9jPRhomqQSoDi1yU9RhU=, read, write, delete, admin


# -----------------------------------------------------------------------------
# Roles with assigned permissions
# 
# Each line conforms to the format defined in the
# org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc
# -----------------------------------------------------------------------------
[roles]
# The 'admin' role has all permissions, indicated by the wildcard '*'
admin = *

# The 'guest' role is allowed to 'read' (action) any (type)
guest = read

# The 'read' role is allowed to 'read' (action) the processobject (type)
read = processobject:read

# The 'write' role is allowed to 'write' (action) the processobject (type)
write = processobject:write

# The 'delete' role is allowed to 'delete' (action) the processobject (type)
delete = processobject:delete

# The 'super' role has all permissions, indicated by the wildcard '*'
super = *

# The 'almost' role is allowed to 'delete' (action) the processobject (type)
# with an ID of 'nil' (instance specific id)
almost = processobject:delete:nil

